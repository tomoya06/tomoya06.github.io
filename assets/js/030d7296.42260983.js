"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1822],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return p}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=t.createContext({}),l=function(e){var n=t.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},c=function(e){var n=l(e.components);return t.createElement(d.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(r),p=o,N=u["".concat(d,".").concat(p)]||u[p]||f[p]||i;return r?t.createElement(N,a(a({ref:n},c),{},{components:r})):t.createElement(N,a({ref:n},c))}));function p(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=u;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3958:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return l},toc:function(){return c},Highlight:function(){return f},default:function(){return p}});var t=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],s={tags:["\u5251\u6307offer","\u4e8c\u53c9\u6811"],id:"\u5e8f\u5217\u5316\u4e8c\u53c9\u6811",title:"\ud83d\udd34 \u5e8f\u5217\u5316\u4e8c\u53c9\u6811"},d=void 0,l={unversionedId:"\u5251\u6307offer/\u5e8f\u5217\u5316\u4e8c\u53c9\u6811",id:"\u5251\u6307offer/\u5e8f\u5217\u5316\u4e8c\u53c9\u6811",isDocsHomePage:!1,title:"\ud83d\udd34 \u5e8f\u5217\u5316\u4e8c\u53c9\u6811",description:"<span",source:"@site/docs/\u5251\u6307offer/offer37_\u5e8f\u5217\u5316\u4e8c\u53c9\u6811.mdx",sourceDirName:"\u5251\u6307offer",slug:"/\u5251\u6307offer/\u5e8f\u5217\u5316\u4e8c\u53c9\u6811",permalink:"/docs/\u5251\u6307offer/\u5e8f\u5217\u5316\u4e8c\u53c9\u6811",tags:[{label:"\u5251\u6307offer",permalink:"/docs/tags/\u5251\u6307offer"},{label:"\u4e8c\u53c9\u6811",permalink:"/docs/tags/\u4e8c\u53c9\u6811"}],version:"current",frontMatter:{tags:["\u5251\u6307offer","\u4e8c\u53c9\u6811"],id:"\u5e8f\u5217\u5316\u4e8c\u53c9\u6811",title:"\ud83d\udd34 \u5e8f\u5217\u5316\u4e8c\u53c9\u6811"},sidebar:"codezone",previous:{title:"\ud83d\udfe2 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2ck\u5927\u8282\u70b9",permalink:"/docs/\u5251\u6307offer/\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2ck\u5927\u8282\u70b9"},next:{title:"\ud83d\udfe1 \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635-ii",permalink:"/docs/\u5251\u6307offer/\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635-ii"}},c=[{value:"\u9898\u89e3 1_\u8d44\u6e90\u6d88\u8017\u5927.py",id:"\u9898\u89e3-1_\u8d44\u6e90\u6d88\u8017\u5927py",children:[]},{value:"\u9898\u89e3 2_\u6211\u89c9\u5f97\u662f\u5bf9\u7684\u4f46\u662f\u4e0d\u7ed9\u8fc7.py",id:"\u9898\u89e3-2_\u6211\u89c9\u5f97\u662f\u5bf9\u7684\u4f46\u662f\u4e0d\u7ed9\u8fc7py",children:[]},{value:"\u9898\u89e3 2_\u5feb\u4e00\u70b9\u70b9.py",id:"\u9898\u89e3-2_\u5feb\u4e00\u70b9\u70b9py",children:[]}],f=function(e){var n=e.children,r=e.color;return(0,i.kt)("span",{style:{backgroundColor:r,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},n)},u={toc:c,Highlight:f};function p(e){var n=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"LeetCode \u63d0\u793a")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"\u9898\u76ee\u96be\u5ea6 ",(0,i.kt)(f,{color:"#ff375f",mdxType:"Highlight"},"\u56f0\u96be")))),(0,i.kt)("h2",{id:"\u9898\u89e3-1_\u8d44\u6e90\u6d88\u8017\u5927py"},"\u9898\u89e3 1_\u8d44\u6e90\u6d88\u8017\u5927.py"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        if not root:\n            return ''\n\n        stack = [root]\n        res = []\n\n        while stack:\n            if all(c is None for c in stack):\n                break\n            for idx in range(0, len(stack)):\n                cur = stack.pop(0)\n                curVal = cur.val if cur else None\n                res.append(curVal)\n                if cur is None:\n                    # stack += [None, None]\n                    pass\n                else:\n                    stack += [cur.left, cur.right]\n        \n        return ','.join(['null' if c is None else str(c) for c in res])\n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        if not data or data == 'None' or data == 'null':\n            return None\n        \n        res = data.split(',')\n        resNodes = []\n        for val in res:\n            if res == 'None' or res == 'null' or not res:\n                resNodes.append(None)\n            else:\n                resNodes.append(TreeNode(val))\n        idx = 0\n        while idx < len(resNodes):\n            leftIdx = 2*idx+1\n            rightIdx = 2*idx+2\n            if resNodes[idx] is None:\n                resNodes.insert(leftIdx, None)\n                resNodes.insert(rightIdx, None)\n            if leftIdx < len(resNodes):\n                resNodes[idx].left = resNodes[leftIdx]\n            if rightIdx < len(resNodes):\n                resNodes[idx].right = resNodes[rightIdx]\n            idx += 1\n        \n        return resNodes[0]\n\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.deserialize(codec.serialize(root))\n")),(0,i.kt)("h2",{id:"\u9898\u89e3-2_\u6211\u89c9\u5f97\u662f\u5bf9\u7684\u4f46\u662f\u4e0d\u7ed9\u8fc7py"},"\u9898\u89e3 2_\u6211\u89c9\u5f97\u662f\u5bf9\u7684\u4f46\u662f\u4e0d\u7ed9\u8fc7.py"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        if not root:\n            return ''\n\n        stack = [root]\n        res = []\n\n        while stack:\n            if all(c is None for c in stack):\n                break\n            for idx in range(0, len(stack)):\n                cur = stack.pop(0)\n                curVal = cur.val if cur else None\n                res.append(curVal)\n                if cur is None:\n                    stack += [None, None]\n                else:\n                    stack += [cur.left, cur.right]\n        \n        return ','.join(['null' if c is None else str(c) for c in res])\n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        if not data or data == 'None' or data == 'null':\n            return None\n        \n        res = data.split(',')\n        resNodes = []\n        for val in res:\n            if res == 'None' or res == 'null' or not res:\n                resNodes.append(None)\n            else:\n                resNodes.append(TreeNode(val))\n        for idx in range(len(res)):\n            if resNodes[idx] is None:\n                continue\n            leftIdx = 2*idx+1\n            rightIdx = 2*idx+2\n            if leftIdx < len(res):\n                resNodes[idx].left = resNodes[leftIdx]\n            if rightIdx < len(res):\n                resNodes[idx].right = resNodes[rightIdx]\n        \n        return resNodes[0]\n\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.deserialize(codec.serialize(root))\n")),(0,i.kt)("h2",{id:"\u9898\u89e3-2_\u5feb\u4e00\u70b9\u70b9py"},"\u9898\u89e3 2_\u5feb\u4e00\u70b9\u70b9.py"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        if not root:\n            return ''\n\n        stack = [root]\n        res = ''\n\n        while stack:\n            if all(c is None for c in stack):\n                break\n            for idx in range(0, len(stack)):\n                cur = stack.pop(0)\n                # curVal = cur.val if cur else None\n                res += str(cur.val) if cur else 'null'\n                res += ','\n                if cur is None:\n                    # stack += [None, None]\n                    pass\n                else:\n                    stack += [cur.left, cur.right]\n        \n        return '[' + res[:-1] + ']'\n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        data = data[1:-1]\n        if not data or data == 'null':\n            return None\n        \n        res = data.split(',')\n        root = TreeNode(int(res[0]))\n        queue = [root]\n        idx = 0\n        while queue:\n            head = queue.pop(0)\n            idx += 1\n            if idx < len(res) and res[idx] != 'null':\n                head.left = TreeNode(int(res[idx]))\n                queue.append(head.left)\n            idx += 1\n            if idx < len(res) and res[idx] != 'null':\n                head.right = TreeNode(int(res[idx]))\n                queue.append(head.right)\n\n        return root\n\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.deserialize(codec.serialize(root))\n")))}p.isMDXComponent=!0}}]);
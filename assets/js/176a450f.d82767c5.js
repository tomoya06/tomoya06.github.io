"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4022],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),f=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=f(e.components);return r.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=f(t),u=o,m=d["".concat(c,".").concat(u)]||d[u]||s[u]||i;return t?r.createElement(m,l(l({ref:n},p),{},{components:t})):r.createElement(m,l({ref:n},p))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=d;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var f=2;f<i;f++)l[f]=t[f];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6986:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return f},toc:function(){return p},Highlight:function(){return s},default:function(){return u}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),l=["components"],a={tags:["\u5251\u6307offer","\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"],id:"I_\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811",title:"\ud83d\udfe1 I_\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},c=void 0,f={unversionedId:"\u5251\u6307offer/I_\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811",id:"\u5251\u6307offer/I_\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811",isDocsHomePage:!1,title:"\ud83d\udfe1 I_\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811",description:"<span",source:"@site/docs/\u5251\u6307offer/offer32_I_\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811.mdx",sourceDirName:"\u5251\u6307offer",slug:"/\u5251\u6307offer/I_\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811",permalink:"/docs/\u5251\u6307offer/I_\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811",tags:[{label:"\u5251\u6307offer",permalink:"/docs/tags/\u5251\u6307offer"},{label:"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22",permalink:"/docs/tags/\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"}],version:"current",frontMatter:{tags:["\u5251\u6307offer","\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"],id:"I_\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811",title:"\ud83d\udfe1 I_\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},sidebar:"codezone",previous:{title:"\ud83d\udfe2 \u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898",permalink:"/docs/\u5251\u6307offer/\u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898"},next:{title:"\ud83d\udfe2 \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f",permalink:"/docs/\u5251\u6307offer/\u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f"}},p=[{value:"\u9898\u89e3 1.py",id:"\u9898\u89e3-1py",children:[]},{value:"\u9898\u89e3 2_\u66f4\u5feb.py",id:"\u9898\u89e3-2_\u66f4\u5febpy",children:[]}],s=function(e){var n=e.children,t=e.color;return(0,i.kt)("span",{style:{backgroundColor:t,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},n)},d={toc:p,Highlight:s};function u(e){var n=e.components,t=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"LeetCode \u63d0\u793a")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"\u9898\u76ee\u96be\u5ea6 ",(0,i.kt)(s,{color:"#ffc01e",mdxType:"Highlight"},"\u4e2d\u7b49")))),(0,i.kt)("h2",{id:"\u9898\u89e3-1py"},"\u9898\u89e3 1.py"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[int]:\n        if root is None:\n            return []\n\n        levl = [root]\n        res = []\n        while levl:\n            len1 = len(levl)\n            for idx in range(len1):\n                n = levl[idx]\n                res.append(n.val)\n                if n.left:\n                    levl.append(n.left)\n                if n.right:\n                    levl.append(n.right)\n            levl = levl[len1:]\n        return res\n")),(0,i.kt)("h2",{id:"\u9898\u89e3-2_\u66f4\u5febpy"},"\u9898\u89e3 2_\u66f4\u5feb.py"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[int]:\n        if root is None:\n            return []\n\n        levl = [root]\n        res = []\n        while levl:\n            n = levl.pop(0)\n            res.append(n.val)\n            if n.left:\n                levl.append(n.left)\n            if n.right:\n                levl.append(n.right)\n        return res\n")))}u.isMDXComponent=!0}}]);